<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.cafe.erp.pos.model.PosOrderDAO">

	<!-- 주문 건수에 대한 정보 입력 (주문코드, 주문총금액, 주문총개수, ....) -->
	<insert id="insertOrder" parameterType="hashmap" >
		insert into CAFE_ORDER(order_code, order_total, order_count, order_accountType, order_date, customer_phone) 
		values((select NVL(max(order_code),0)+1 from CAFE_ORDER), TO_NUMBER(#{order_total}), TO_NUMBER(#{order_count}), #{order_accountType}, sysdate, #{customer_phone, jdbcType=VARCHAR})
	</insert>	
	
	<!-- 쿠폰 적립 시 등록된 전화번호가 아니면 익명 회원으로 등록 (전화번호, 스탬프) -->
  <insert id="insertAnonymous" parameterType="hashmap">
      insert into CAFE_CUSTOMER(customer_phone, customer_stamp) values( #{customer_phone},#{customer_stamp} )
   </insert>
	
	<!-- 기존 회원 전화번호 조회 -->
	<select id="phoneCheck" resultType="Integer">
		select count(customer_phone) from CAFE_CUSTOMER where customer_phone = #{customer_phone}
	</select>
	
	<!-- 결제 등록이 완료된 후 주문한 음료 개수 만큼 스탬프 추가 -->
	<update id="updateStamp" parameterType="hashmap" >
		update CAFE_CUSTOMER set customer_stamp = customer_stamp + #{order_count} where customer_phone = #{customer_phone}
	</update>
	
	
	
	
	<!-- 직원 근태 입력/수정/체크 -->
	<!-- 직원 출근 등록 -->
	<insert id="insertAttend" parameterType="hashmap">
		insert into cafe_emptna(emptna_code,emptna_empcode,emptna_year, emptna_month,emptna_day,emptna_starttime) 
		values( (select nvl(max(emptna_code),0)+1 from cafe_emptna), 
      (select employee_code from cafe_employee where employee_name=#{employee_name} and employee_jumin=#{employee_jumin})
      ,to_number(to_char(sysdate,'yyyy')),to_number(to_char(sysdate,'mm'))
      ,to_number(to_char(sysdate,'dd')),sysdate)
	</insert>
	
	<!-- 직원 출근 등록 확인 여부 (중복 출근 방지) -->
	<select id="checkAttend" parameterType="hashmap" resultType="integer">
		select count(*) from cafe_empTna a inner join cafe_employee b on a.emptna_empcode=b.employee_code where emptna_year=to_number(to_char(sysdate,'yyyy')) and
   	emptna_month=to_number(to_char(sysdate,'mm')) and emptna_day=to_number(to_char(sysdate,'dd')) and b.employee_name=#{employee_name} and b.employee_jumin=#{employee_jumin}	
	</select>
	
	<!-- 직원 퇴근 등록 확인 여부 (중복 퇴근 방지) -->
	<select id="checkOffWork" parameterType="hashmap" resultType="hashmap">
		select * from cafe_emptna where emptna_empcode=(select distinct b.emptna_empcode from cafe_employee a inner join cafe_emptna b 
   	on a.employee_code = b.emptna_empcode where a.employee_name=#{employee_name} and a.employee_jumin=#{employee_jumin})
   	and emptna_year=(to_number(to_char(sysdate,'yyyy'))) 
    	and emptna_month=(to_number(to_char(sysdate,'mm'))) and emptna_day=(to_number(to_char(sysdate,'dd')))
	</select>
	
	<!-- 직원 퇴근 등록 (퇴근일시, (퇴근일시 - 출근일시) -> 일한 시간..) -->
	<update id="updateAttend" parameterType="hashmap" >
   	update cafe_emptna set emptna_endtime=sysdate,
   	emptna_daytotaltime=(select round((sysdate-emptna_starttime)*24,1) from cafe_emptna where emptna_year=(to_number(to_char(sysdate,'yyyy'))) 
    	and emptna_month=(to_number(to_char(sysdate,'mm'))) 
    	and emptna_day=(to_number(to_char(sysdate,'dd')))
     	and emptna_empcode=(select distinct b.emptna_empcode from cafe_employee a inner join cafe_emptna b 
   	on a.employee_code = b.emptna_empcode where a.employee_name=#{employee_name} and a.employee_jumin=#{employee_jumin}))
   	where emptna_empcode= (select distinct b.emptna_empcode from cafe_employee a inner join cafe_emptna b 
   	on a.employee_code = b.emptna_empcode where a.employee_name=#{employee_name} and a.employee_jumin=#{employee_jumin})
   	and emptna_year=(to_number(to_char(sysdate,'yyyy'))) 
    	and emptna_month=(to_number(to_char(sysdate,'mm'))) 
    	and emptna_day=(to_number(to_char(sysdate,'dd')))
    </update>
	
	<!-- 근무자인지 체크 -->
	<select id="isEmployee" parameterType="hashmap" resultType="integer">
		select count(*) from cafe_employee where employee_name = #{employee_name} and employee_jumin = #{employee_jumin}
	</select>
	
	
	
	<!-- 쿠폰 적용 -->
	<!-- 입력받은 전화번호로 스탬프 조회 -->
	<select id="selectStamp" resultType="Integer" parameterType="String">
		select customer_stamp from cafe_customer where customer_phone = #{phone}
	</select>
	
	<!-- 쿠폰 사용 -->
	<update id="useStamp" parameterType="hashmap">
		update cafe_customer set customer_stamp = #{customer_stamp} - 10 where customer_phone = #{customer_phone}
	</update>
	
	
	
	<!-- 정산 -->
	<!-- 각 결제유형 별로 총액과 총개수를 구함 (total, 카드, 현금) -->
	<select id="sellByGroup" resultType="hashmap">
		select order_accounttype, sum(order_total) sellTotal, count(*) sellCount from cafe_order 
		where to_char(order_date, 'yy/mm/dd') = to_char(sysdate, 'yy/mm/dd') group by rollup(order_accounttype) order by order_accounttype
	</select>
	
	<!-- POS 시작 시간과 준비금을 등록 -->
	<select id="getPosStartInfo" resultType="hashmap">
		select reserveFund_code, to_char(reserveFund_startTime, 'yyyy/mm/dd hh24:mi:ss') STARTTIME, reservefund_total
    	from cafe_reservefund where to_char(reserveFund_startTime) = to_char(sysdate, 'yy/mm/dd')
	</select>
	
	<!-- 현재 시간을 구함 (시작 등록과 정산 등록시 시작 시간, 마감 시간으로 등록됨) -->
	<select id="getEndTime" resultType="hashmap">
		select to_char(sysdate, 'yyyy/mm/dd hh24:mi:ss') nowtime from dual
	</select>
	
	<!-- 금일 마감등록이 되었는지 체크 (마감정산 중복 등록 방지) -->
	<select id="hasTodayPosEnd" resultType="integer">
		select count(*) from cafe_accounts where to_char(accounts_endSell) = to_char(sysdate, 'yy/mm/dd')
	</select>
	
	<!-- 금일 마감등록에 대한 정보를 DB에 넣음 -->
	<insert id="insertPosEndInfo" parameterType="hashmap">
		insert into CAFE_ACCOUNTS values(
			(select nvl(max(accounts_code),0)+1 from CAFE_ACCOUNTS),
			#{totalSell}, #{cardSell}, #{cashSell}, #{sellCount},
			to_date(#{startSell}, 'yy/mm/dd hh24:mi:ss'), to_date(#{endSell}, 'yy/mm/dd hh24:mi:ss'), #{reserveId}
		)
	</insert>
	
	
	
	
	<!-- POS 시작 준비 관련 -->
	<!-- 금일 POS 준비 등록 확인 여부 (준비 등록 중복 방지) -->
	<select id="hasTodayPosStart" resultType="integer">
		select count(*) from CAFE_reserveFund where to_char(reserveFund_startTime) = to_char(sysdate, 'yy/mm/dd')
	</select>
	
	<!-- 금일 POS 준비 등록 (시작 시간, 준비금) -->
	<insert id="insertPosStartInfo" parameterType="hashmap">
		insert into CAFE_reserveFund(reserveFund_code, reserveFund_startTime, reserveFund_total) values(
			(select nvl(max(reservefund_code),0)+1 from CAFE_reserveFund),
			to_date(#{startTime}, 'yy/mm/dd hh24:mi:ss'), TO_NUMBER(#{startMoney})
		)
	</insert>
	
	<!-- 금일 마감등록과 동시에 준비금 테이블에 마감시간 등록 -->
	<update id="updatePosStartEnd" parameterType="hashmap">
		update cafe_reservefund set reserveFund_endTime = to_date(#{endSell}, 'yy/mm/dd hh24:mi:ss') 
		where to_char(reserveFund_startTime, 'yy/mm/dd') = to_char(sysdate, 'yy/mm/dd')
	</update>

</mapper>